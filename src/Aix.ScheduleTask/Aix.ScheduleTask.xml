<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aix.ScheduleTask</name>
    </assembly>
    <members>
        <member name="P:Aix.ScheduleTask.AixScheduleTaskOptions.Master">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.AixScheduleTaskOptions.DBType">
            <summary>
            数据库类型   1=SqlServer（默认值） 2=Mysql 
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.AixScheduleTaskOptions.PreReadSecond">
             <summary>
            预提前读取时间（秒） 默认10秒  范围[5,30]
             </summary>
        </member>
        <member name="P:Aix.ScheduleTask.AixScheduleTaskOptions.ClusterType">
            <summary>
            集群类型 0=多集群（默认值）  1=单实例
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.AixScheduleTaskOptions.ConsumerThreadCount">
            <summary>
            消费线程数 默认2
            </summary>
        </member>
        <member name="T:Aix.ScheduleTask.Foundation.IScheduleTaskDistributedLock">
            <summary>
            分布式锁
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.Foundation.IScheduleTaskDistributedLock.Lock(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            分布式锁
            </summary>
            <param name="key">分布式锁键</param>
            <param name="span">超过该时间 自动释放</param>
            <param name="action">同步代码块</param>
            <param name="concurrentCallback">存在并发时的回调，默认是抛出异常，可以重写</param>
            <returns></returns>
        </member>
        <member name="T:Aix.ScheduleTask.Foundation.RepeatChecker">
            <summary>
            防重检测
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.Foundation.TaskEx.DelayNoException(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            无异常延迟
            </summary>
            <param name="delay"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Aix.ScheduleTask.Foundation.TaskEx.DelayNoException(System.Int32,System.Threading.CancellationToken)">
            <summary>
            无异常延迟
            </summary>
            <param name="millisecondsDelay"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Aix.ScheduleTask.IScheduleTaskService">
            <summary>
            定时任务接口
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.IScheduleTaskService.Start">
            <summary>
            开始定时任务服务
            </summary>
            <returns></returns>
        </member>
        <member name="E:Aix.ScheduleTask.IScheduleTaskService.OnHandleMessage">
            <summary>
            接收定时任务事件
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.IScheduleTaskService.SaveExecuteResult(Aix.ScheduleTask.ExecuteResultDTO)">
            <summary>
            保存执行结果
            </summary>
            <param name="resultDTO"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Aix.ScheduleTask.Model.AixDistributionLock" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixDistributionLock.LockName" -->
        <!-- Badly formed XML comment ignored for member "T:Aix.ScheduleTask.Model.AixScheduleTaskInfo" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.Id" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.TaskGroup" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.Status" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.TaskName" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.TaskDesc" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.Cron" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.TaskContent" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.LastExecuteTime" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.NextExecuteTime" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.MaxRetryCount" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.CreatorId" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.CreateTime" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.ModifierId" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskInfo.ModifyTime" -->
        <!-- Badly formed XML comment ignored for member "T:Aix.ScheduleTask.Model.AixScheduleTaskLog" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskLog.Id" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskLog.ScheduleTaskId" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskLog.ResultCode" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskLog.ResultMessage" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskLog.CreateTime" -->
        <!-- Badly formed XML comment ignored for member "P:Aix.ScheduleTask.Model.AixScheduleTaskLog.ModifyTime" -->
        <member name="P:Aix.ScheduleTask.ScheduleTaskContext.Id">
            <summary>
            定时任务id
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.ScheduleTaskContext.TaskGroup">
            <summary>
            执行器 根据需要扩展
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.ScheduleTaskContext.TaskContent">
            <summary>
            任务内容
            </summary>
        </member>
        <member name="T:Aix.ScheduleTask.ExecuteResultDTO">
            <summary>
            执行结果信息
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.ExecuteResultDTO.Id">
            <summary>
            定时任务id
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.ExecuteResultDTO.Code">
            <summary>
            状态码 
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.ExecuteResultDTO.Message">
            <summary>
            直接结果描述
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.RepositoryImpl.AixDistributionLockMySqlRepository.UseLock(System.String,System.Int32)">
            <summary>
            开启分布式锁，跟着当前事务结束而结束 mysql
            </summary>
            <param name="lockName">请确保数据库中已存在该lockName</param>
            <param name="commandTimeout">超时时间 单位 秒</param>
            <returns></returns>
        </member>
        <member name="T:Aix.ScheduleTask.RepositoryImpl.SqlExecuteTrace">
            <summary>
            sql执行 跟踪
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.RepositoryImpl.AixDistributionLockSqlServerRepository.UseLock(System.String,System.Int32)">
            <summary>
            开启分布式锁，跟着当前事务结束而结束   sqlserver
            </summary>
            <param name="lockName">请确保数据库中已存在该lockName</param>
            <param name="commandTimeout">超时时间 单位 秒</param>
            <returns></returns>
        </member>
        <member name="T:Aix.ScheduleTask.Repository.ICommonRepository">
            <summary>
            公共接口
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.IScheduleTaskLifetime.ScheduleTaskStarted">
            <summary>
            开始完成token
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.IScheduleTaskLifetime.ScheduleTaskStopping">
            <summary>
            开始停止token 业务判断请使用这个属性
            </summary>
        </member>
        <member name="P:Aix.ScheduleTask.IScheduleTaskLifetime.ScheduleTaskStopped">
            <summary>
            停止结束token
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.IScheduleTaskLifetime.Stop">
            <summary>
            主动停止
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.IScheduleTaskLifetime.NotifyStarted">
            <summary>
            开始完成通知
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.IScheduleTaskLifetime.NotifyStopped">
            <summary>
            停止结束通知
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.ScheduleTaskLifetime.Stop">
            <summary>
            主动停止
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.ScheduleTaskLifetime.NotifyStarted">
            <summary>
            开始完成通知
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.ScheduleTaskLifetime.NotifyStopped">
            <summary>
            停止结束通知
            </summary>
        </member>
        <member name="T:Aix.ScheduleTask.ScheduleTaskService">
            <summary>
            定时任务执行器  不建议间隔10秒以下的的定时任务
            </summary>
        </member>
        <member name="M:Aix.ScheduleTask.ScheduleTaskService.DistributionLockWrap">
            <summary>
            根据是否集群环境是否增加分布式锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aix.ScheduleTask.ScheduleTaskService.TimeStampToDateTime(System.Int64)">
            <summary>
            时间戳转时间
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Aix.ScheduleTask.Utils.DateTimeUtils.TimeStampToDateTime(System.Int64)">
            <summary>
            时间戳转时间
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Aix.ScheduleTask.Utils.StringUtils.IfEmpty(System.String[])">
            <summary>
            找到一个不为empty的返回
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
    </members>
</doc>
